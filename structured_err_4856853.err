WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1750911294.324011  123224 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1750911294.578361  123224 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
/N/u/skachole/BigRed200/pathoenv/lib/python3.10/site-packages/umap/umap_.py:1945: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.
  warn(f"n_jobs value {self.n_jobs} overridden to 1 by setting random_state. Use no seed for parallelism.")
/N/project/wsiclass/HANCOCK_MultimodalDataset/multimodal_machine_learning/execution/outcome_prediction.py:167: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  df_split.recurrence = df_split.recurrence.replace({"no": 0, "yes": 1})
/N/project/wsiclass/HANCOCK_MultimodalDataset/multimodal_machine_learning/execution/outcome_prediction.py:167: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  df_split.recurrence = df_split.recurrence.replace({"no": 0, "yes": 1})
/N/project/wsiclass/HANCOCK_MultimodalDataset/multimodal_machine_learning/execution/outcome_prediction.py:167: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  df_split.recurrence = df_split.recurrence.replace({"no": 0, "yes": 1})
